Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodolgy:
    No powerpoints
    100% hands on

Repository
    https://github.com/tkmagesh/JD-React-May-2022

About You
    Name
    Experience
    Primary Skillset
    Experience in React (if any)

Books:
    Patterns of Enterprise Application Architecture (PoEAA) (Martin Fowler)
    Agile Principles Patterns and Practices (Robert.C. Marting)
    Refactoring (Martin Fowler)
    TDD
    Head First Design Patterns
    Refactoring to Patterns (Joshua Kerievsky)
    Growing Object Oriented Software Guided by Tests


Domain Driven Design


 
React?
    Framework for building RIA / SPA

SSR (server side rendering)
    Next.js (React)

Salary = Basic + HRA + DA - Tax(%)

Assumptions:
    1. Preparing the app for deployment (creating separate CSS files, JS files etc) is taken care by another team.
    2. The app meets 100% expectations of the sponsor.
        No more UI enhances are needed.
        No validation logic is needed.

ES6 (ES2015 / ECMAScript6 / ESNext)
1. let
2. const
3. array destructuring
4. rest operator (arrays)
5. spread operator (arrays)
6. object destructuring
7. rest operator (objects)
8. spread operator (objects)
9. default parameters
10. arrow functions
11. iterators (for..of)
12. classes

Array Methods
    forEach
    map
    reduce
    filter

Exercise
var products = [
	{id : 6, name : 'Pen', cost : 50, units : 20, category : 'stationary'},
	{id : 9, name : 'Ten', cost : 70, units : 70, category : 'stationary'},
	{id : 3, name : 'Len', cost : 60, units : 60, category : 'grocery'},
	{id : 5, name : 'Zen', cost : 30, units : 30, category : 'grocery'},
	{id : 1, name : 'Ken', cost : 20, units : 80, category : 'utencil'},
    {id : 7, name : 'Mouse', cost : 100, units : 20, category : 'electronics'}
];

Write the code for the following:
(NOTE: DO NOT use a loop)

1. Filter the stationary products (use the 'filter' method)
        var stationaryProducts = products.filter(product => product.category === 'stationary')

2. Print the name & cost of the products (use the 'forEach' method)
        products.forEach(product => console.log(product.name, product.cost))


3. Find the minimum cost (use the 'reduce' method)
        products.reduce((result, product) => product.cost < result ? product.cost : result, Number.MAX_VALUE)

4. Find the product with the least cost (use the 'reduce' method)
        products.reduce((result, product) => result.cost < product.cost ? result : product)

5. Create a new list of products with the products cost applied with 10% discount (use the 'map' method)
        var discountedProducts = products.map(product => ({...product, cost : product.cost * 0.9 }))


Component
    encapsulation of Presentation + User Interaction + State

HTML vs JSX
    HTML
        Open tags without corresponding close tags are allowed
        "for" attributes are allowed
        "class" attributes are allowed

    JSX
        Every open tag MUST have a corresponding close tag
        Use "htmlFor" inplace of "for" attributes
        Use "className" inplace of "class" attributes


Create a React component (Calculator) (using state) for the following
    <h1>Calculator</h1>
    <hr>
    <input type="number" name="" id="">
    <input type="number" name="" id="">
    <br>
    <button>Add</button>
    <button>Subtract</button>
    <button>Multiply</button>
    <button>Divide</button>
    <div>Result</div>

Create a Salary Calculator using React

React Hooks
    functions designed to handle the side-effects of a component
    Built-in hooks
        useState (manage state)
        useEffect (manage life-cycle events)
        useContext (manage context)
        useReducer (manage complex state)
        useCallback (manage memoization)
        useMemo
        useRef
        useImperativeHandle
        useLayoutEffect
        useDebugValue


State
    UI State
        Any data that supports the presentational needs of the application
        It is highly UNLIKELY that this data is needed in other parts of the application
        Feel free to maintain this in the component

    Application State
        Any data that supports the core application domain
        it is highly LIKELY that this data is needed in other parts of the application
        DO NOT maintain this in the component

Context
    Used when some data need to be shared across component hierarchy without needing to pass the data as props

Bug Tracker
    (done) 1. Add new bugs
    (done) 2. List the added bugs
    (done) 3. Toggle the closed status of the bug
    (done) 4. Delete the bug
    (done) 5. Delete all closed bugs
    (done) 6. Display stats  (# of closed bugs / total # of bugs)
    7. Sort the bugs (Homework)
    (done) 8. Refactor the 'Bug' component into smaller components (BugStats, BugSort, BugEdit, BugList, BugItem)
    9. Persist the bugs in the server
    (done) 10. Add & List the projects (project = {id, name})
    (done) 11. Associate bugs with a project
    12. Filter the bugs based on the project selected in the 'Projects' component
    12. Access the bugs using a unique URL (routing)
    

To use multiple versions of Node.js
    Download and install nvm from https://github.com/coreybutler/nvm-windows/releases
    nvm install latest
    nvm use latest

To install yarn
    [sudo] npm install yarn -g

To create a react application (run the command in the folder where you want to create the application)
    npx create-react-app <app-name>
    yarn create react-app <app-name>

    yarn create react-app bug-tracker-app

To install redux
    npm install redux
    yarn add redux

To start the application
    npm start
    yarn start

ES6 Modules
    Everything defined in a js file is considered PRIVATE
    Public entities have to be explicitly EXPORTED
    To use the public entities from other files, they have to explicitly IMPORTED

    There can be ONE (ONLY ONE) default export from a file


applicatin structure
    /src
        /bugs
            /actions
                addNew.js
                toggle.js
                remove.js
                removeClosed.js
                index.js (combine all the action creators and export them as 1 action creator object)
            /components
                BugStats
                BugSort
                BugEdit
                BugItem
                BugList
            /reducers
                bugsReducer
            index.js (Bugs Component)

        /projects
            /actions
                addNew.js               
                index.js (combine all the action creators and export them as 1 action creator object)
            /reducers
                projectsReducer
            index.js (Projects Component)
            
        /store
            /index.js (create the store)

react-redux
    Provider
    useDispatch
    useSelector

Redux Middleware
    Used to encapsulate any logic that is common across actions